/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.node;

import fr.umlv.symphonie.data.formula.analysis.Analysis;

public final class ALogicalOrLogicalOrExpression extends PLogicalOrExpression {

  private PLogicalOrExpression _left_;
  private TLogicalOrOperator _logicalOrOperator_;
  private PLogicalAndExpression _right_;

  public ALogicalOrLogicalOrExpression() {
  }

  public ALogicalOrLogicalOrExpression(PLogicalOrExpression _left_,
      TLogicalOrOperator _logicalOrOperator_, PLogicalAndExpression _right_) {
    setLeft(_left_);

    setLogicalOrOperator(_logicalOrOperator_);

    setRight(_right_);

  }

  public Object clone() {
    return new ALogicalOrLogicalOrExpression(
        (PLogicalOrExpression) cloneNode(_left_),
        (TLogicalOrOperator) cloneNode(_logicalOrOperator_),
        (PLogicalAndExpression) cloneNode(_right_));
  }

  public void apply(Switch sw) {
    ((Analysis) sw).caseALogicalOrLogicalOrExpression(this);
  }

  public PLogicalOrExpression getLeft() {
    return _left_;
  }

  public void setLeft(PLogicalOrExpression node) {
    if (_left_ != null) {
      _left_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _left_ = node;
  }

  public TLogicalOrOperator getLogicalOrOperator() {
    return _logicalOrOperator_;
  }

  public void setLogicalOrOperator(TLogicalOrOperator node) {
    if (_logicalOrOperator_ != null) {
      _logicalOrOperator_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _logicalOrOperator_ = node;
  }

  public PLogicalAndExpression getRight() {
    return _right_;
  }

  public void setRight(PLogicalAndExpression node) {
    if (_right_ != null) {
      _right_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _right_ = node;
  }

  public String toString() {
    return "" + toString(_left_) + toString(_logicalOrOperator_)
        + toString(_right_);
  }

  void removeChild(Node child) {
    if (_left_ == child) {
      _left_ = null;
      return;
    }

    if (_logicalOrOperator_ == child) {
      _logicalOrOperator_ = null;
      return;
    }

    if (_right_ == child) {
      _right_ = null;
      return;
    }

  }

  void replaceChild(Node oldChild, Node newChild) {
    if (_left_ == oldChild) {
      setLeft((PLogicalOrExpression) newChild);
      return;
    }

    if (_logicalOrOperator_ == oldChild) {
      setLogicalOrOperator((TLogicalOrOperator) newChild);
      return;
    }

    if (_right_ == oldChild) {
      setRight((PLogicalAndExpression) newChild);
      return;
    }

  }
}
