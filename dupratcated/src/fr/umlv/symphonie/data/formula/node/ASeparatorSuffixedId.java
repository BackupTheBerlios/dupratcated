/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.node;

import fr.umlv.symphonie.data.formula.analysis.Analysis;

public final class ASeparatorSuffixedId extends PSeparatorSuffixedId {

  private TIdentifier _identifier_;
  private TIdSeparator _idSeparator_;

  public ASeparatorSuffixedId() {
  }

  public ASeparatorSuffixedId(TIdentifier _identifier_,
      TIdSeparator _idSeparator_) {
    setIdentifier(_identifier_);

    setIdSeparator(_idSeparator_);

  }

  public Object clone() {
    return new ASeparatorSuffixedId((TIdentifier) cloneNode(_identifier_),
        (TIdSeparator) cloneNode(_idSeparator_));
  }

  public void apply(Switch sw) {
    ((Analysis) sw).caseASeparatorSuffixedId(this);
  }

  public TIdentifier getIdentifier() {
    return _identifier_;
  }

  public void setIdentifier(TIdentifier node) {
    if (_identifier_ != null) {
      _identifier_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _identifier_ = node;
  }

  public TIdSeparator getIdSeparator() {
    return _idSeparator_;
  }

  public void setIdSeparator(TIdSeparator node) {
    if (_idSeparator_ != null) {
      _idSeparator_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _idSeparator_ = node;
  }

  public String toString() {
    return "" + toString(_identifier_) + toString(_idSeparator_);
  }

  void removeChild(Node child) {
    if (_identifier_ == child) {
      _identifier_ = null;
      return;
    }

    if (_idSeparator_ == child) {
      _idSeparator_ = null;
      return;
    }

  }

  void replaceChild(Node oldChild, Node newChild) {
    if (_identifier_ == oldChild) {
      setIdentifier((TIdentifier) newChild);
      return;
    }

    if (_idSeparator_ == oldChild) {
      setIdSeparator((TIdSeparator) newChild);
      return;
    }

  }
}
