/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.node;

import fr.umlv.symphonie.data.formula.analysis.Analysis;

public final class AParenthethicComparativeExpression extends
    PComparativeExpression {

  private TLeftParenthesis _leftParenthesis_;
  private PLogicalOrExpression _logicalOrExpression_;
  private TRightParenthesis _rightParenthesis_;

  public AParenthethicComparativeExpression() {
  }

  public AParenthethicComparativeExpression(TLeftParenthesis _leftParenthesis_,
      PLogicalOrExpression _logicalOrExpression_,
      TRightParenthesis _rightParenthesis_) {
    setLeftParenthesis(_leftParenthesis_);

    setLogicalOrExpression(_logicalOrExpression_);

    setRightParenthesis(_rightParenthesis_);

  }

  public Object clone() {
    return new AParenthethicComparativeExpression(
        (TLeftParenthesis) cloneNode(_leftParenthesis_),
        (PLogicalOrExpression) cloneNode(_logicalOrExpression_),
        (TRightParenthesis) cloneNode(_rightParenthesis_));
  }

  public void apply(Switch sw) {
    ((Analysis) sw).caseAParenthethicComparativeExpression(this);
  }

  public TLeftParenthesis getLeftParenthesis() {
    return _leftParenthesis_;
  }

  public void setLeftParenthesis(TLeftParenthesis node) {
    if (_leftParenthesis_ != null) {
      _leftParenthesis_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _leftParenthesis_ = node;
  }

  public PLogicalOrExpression getLogicalOrExpression() {
    return _logicalOrExpression_;
  }

  public void setLogicalOrExpression(PLogicalOrExpression node) {
    if (_logicalOrExpression_ != null) {
      _logicalOrExpression_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _logicalOrExpression_ = node;
  }

  public TRightParenthesis getRightParenthesis() {
    return _rightParenthesis_;
  }

  public void setRightParenthesis(TRightParenthesis node) {
    if (_rightParenthesis_ != null) {
      _rightParenthesis_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _rightParenthesis_ = node;
  }

  public String toString() {
    return "" + toString(_leftParenthesis_) + toString(_logicalOrExpression_)
        + toString(_rightParenthesis_);
  }

  void removeChild(Node child) {
    if (_leftParenthesis_ == child) {
      _leftParenthesis_ = null;
      return;
    }

    if (_logicalOrExpression_ == child) {
      _logicalOrExpression_ = null;
      return;
    }

    if (_rightParenthesis_ == child) {
      _rightParenthesis_ = null;
      return;
    }

  }

  void replaceChild(Node oldChild, Node newChild) {
    if (_leftParenthesis_ == oldChild) {
      setLeftParenthesis((TLeftParenthesis) newChild);
      return;
    }

    if (_logicalOrExpression_ == oldChild) {
      setLogicalOrExpression((PLogicalOrExpression) newChild);
      return;
    }

    if (_rightParenthesis_ == oldChild) {
      setRightParenthesis((TRightParenthesis) newChild);
      return;
    }

  }
}
