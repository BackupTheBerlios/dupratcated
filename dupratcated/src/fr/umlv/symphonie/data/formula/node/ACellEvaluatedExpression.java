/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.node;

import fr.umlv.symphonie.data.formula.analysis.Analysis;

public final class ACellEvaluatedExpression extends PEvaluatedExpression {

  private TBlockStart _blockStart_;
  private TIdentifier _identifier_;
  private TBlockEnd _blockEnd_;

  public ACellEvaluatedExpression() {
  }

  public ACellEvaluatedExpression(TBlockStart _blockStart_,
      TIdentifier _identifier_, TBlockEnd _blockEnd_) {
    setBlockStart(_blockStart_);

    setIdentifier(_identifier_);

    setBlockEnd(_blockEnd_);

  }

  public Object clone() {
    return new ACellEvaluatedExpression((TBlockStart) cloneNode(_blockStart_),
        (TIdentifier) cloneNode(_identifier_),
        (TBlockEnd) cloneNode(_blockEnd_));
  }

  public void apply(Switch sw) {
    ((Analysis) sw).caseACellEvaluatedExpression(this);
  }

  public TBlockStart getBlockStart() {
    return _blockStart_;
  }

  public void setBlockStart(TBlockStart node) {
    if (_blockStart_ != null) {
      _blockStart_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _blockStart_ = node;
  }

  public TIdentifier getIdentifier() {
    return _identifier_;
  }

  public void setIdentifier(TIdentifier node) {
    if (_identifier_ != null) {
      _identifier_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _identifier_ = node;
  }

  public TBlockEnd getBlockEnd() {
    return _blockEnd_;
  }

  public void setBlockEnd(TBlockEnd node) {
    if (_blockEnd_ != null) {
      _blockEnd_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _blockEnd_ = node;
  }

  public String toString() {
    return "" + toString(_blockStart_) + toString(_identifier_)
        + toString(_blockEnd_);
  }

  void removeChild(Node child) {
    if (_blockStart_ == child) {
      _blockStart_ = null;
      return;
    }

    if (_identifier_ == child) {
      _identifier_ = null;
      return;
    }

    if (_blockEnd_ == child) {
      _blockEnd_ = null;
      return;
    }

  }

  void replaceChild(Node oldChild, Node newChild) {
    if (_blockStart_ == oldChild) {
      setBlockStart((TBlockStart) newChild);
      return;
    }

    if (_identifier_ == oldChild) {
      setIdentifier((TIdentifier) newChild);
      return;
    }

    if (_blockEnd_ == oldChild) {
      setBlockEnd((TBlockEnd) newChild);
      return;
    }

  }
}
