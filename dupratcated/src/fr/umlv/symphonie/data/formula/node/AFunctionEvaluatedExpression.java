/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.node;

import fr.umlv.symphonie.data.formula.analysis.Analysis;

public final class AFunctionEvaluatedExpression extends PEvaluatedExpression {

  private TFuncId _funcId_;
  private TLeftParenthesis _leftParenthesis_;
  private PBlockExpression _blockExpression_;
  private TRightParenthesis _rightParenthesis_;

  public AFunctionEvaluatedExpression() {
  }

  public AFunctionEvaluatedExpression(TFuncId _funcId_,
      TLeftParenthesis _leftParenthesis_, PBlockExpression _blockExpression_,
      TRightParenthesis _rightParenthesis_) {
    setFuncId(_funcId_);

    setLeftParenthesis(_leftParenthesis_);

    setBlockExpression(_blockExpression_);

    setRightParenthesis(_rightParenthesis_);

  }

  public Object clone() {
    return new AFunctionEvaluatedExpression((TFuncId) cloneNode(_funcId_),
        (TLeftParenthesis) cloneNode(_leftParenthesis_),
        (PBlockExpression) cloneNode(_blockExpression_),
        (TRightParenthesis) cloneNode(_rightParenthesis_));
  }

  public void apply(Switch sw) {
    ((Analysis) sw).caseAFunctionEvaluatedExpression(this);
  }

  public TFuncId getFuncId() {
    return _funcId_;
  }

  public void setFuncId(TFuncId node) {
    if (_funcId_ != null) {
      _funcId_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _funcId_ = node;
  }

  public TLeftParenthesis getLeftParenthesis() {
    return _leftParenthesis_;
  }

  public void setLeftParenthesis(TLeftParenthesis node) {
    if (_leftParenthesis_ != null) {
      _leftParenthesis_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _leftParenthesis_ = node;
  }

  public PBlockExpression getBlockExpression() {
    return _blockExpression_;
  }

  public void setBlockExpression(PBlockExpression node) {
    if (_blockExpression_ != null) {
      _blockExpression_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _blockExpression_ = node;
  }

  public TRightParenthesis getRightParenthesis() {
    return _rightParenthesis_;
  }

  public void setRightParenthesis(TRightParenthesis node) {
    if (_rightParenthesis_ != null) {
      _rightParenthesis_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _rightParenthesis_ = node;
  }

  public String toString() {
    return "" + toString(_funcId_) + toString(_leftParenthesis_)
        + toString(_blockExpression_) + toString(_rightParenthesis_);
  }

  void removeChild(Node child) {
    if (_funcId_ == child) {
      _funcId_ = null;
      return;
    }

    if (_leftParenthesis_ == child) {
      _leftParenthesis_ = null;
      return;
    }

    if (_blockExpression_ == child) {
      _blockExpression_ = null;
      return;
    }

    if (_rightParenthesis_ == child) {
      _rightParenthesis_ = null;
      return;
    }

  }

  void replaceChild(Node oldChild, Node newChild) {
    if (_funcId_ == oldChild) {
      setFuncId((TFuncId) newChild);
      return;
    }

    if (_leftParenthesis_ == oldChild) {
      setLeftParenthesis((TLeftParenthesis) newChild);
      return;
    }

    if (_blockExpression_ == oldChild) {
      setBlockExpression((PBlockExpression) newChild);
      return;
    }

    if (_rightParenthesis_ == oldChild) {
      setRightParenthesis((TRightParenthesis) newChild);
      return;
    }

  }
}
