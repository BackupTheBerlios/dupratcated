/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.node;

import fr.umlv.symphonie.data.formula.analysis.Analysis;

public final class AComparativeLogicalAndExpression extends
    PLogicalAndExpression {

  private PComparativeExpression _comparativeExpression_;

  public AComparativeLogicalAndExpression() {
  }

  public AComparativeLogicalAndExpression(
      PComparativeExpression _comparativeExpression_) {
    setComparativeExpression(_comparativeExpression_);

  }

  public Object clone() {
    return new AComparativeLogicalAndExpression(
        (PComparativeExpression) cloneNode(_comparativeExpression_));
  }

  public void apply(Switch sw) {
    ((Analysis) sw).caseAComparativeLogicalAndExpression(this);
  }

  public PComparativeExpression getComparativeExpression() {
    return _comparativeExpression_;
  }

  public void setComparativeExpression(PComparativeExpression node) {
    if (_comparativeExpression_ != null) {
      _comparativeExpression_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _comparativeExpression_ = node;
  }

  public String toString() {
    return "" + toString(_comparativeExpression_);
  }

  void removeChild(Node child) {
    if (_comparativeExpression_ == child) {
      _comparativeExpression_ = null;
      return;
    }

  }

  void replaceChild(Node oldChild, Node newChild) {
    if (_comparativeExpression_ == oldChild) {
      setComparativeExpression((PComparativeExpression) newChild);
      return;
    }

  }
}
