/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.node;

import fr.umlv.symphonie.data.formula.analysis.Analysis;

public final class ANumericUnaryExpression extends PUnaryExpression {

  private PNumericExpression _numericExpression_;

  public ANumericUnaryExpression() {
  }

  public ANumericUnaryExpression(PNumericExpression _numericExpression_) {
    setNumericExpression(_numericExpression_);

  }

  public Object clone() {
    return new ANumericUnaryExpression(
        (PNumericExpression) cloneNode(_numericExpression_));
  }

  public void apply(Switch sw) {
    ((Analysis) sw).caseANumericUnaryExpression(this);
  }

  public PNumericExpression getNumericExpression() {
    return _numericExpression_;
  }

  public void setNumericExpression(PNumericExpression node) {
    if (_numericExpression_ != null) {
      _numericExpression_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _numericExpression_ = node;
  }

  public String toString() {
    return "" + toString(_numericExpression_);
  }

  void removeChild(Node child) {
    if (_numericExpression_ == child) {
      _numericExpression_ = null;
      return;
    }

  }

  void replaceChild(Node oldChild, Node newChild) {
    if (_numericExpression_ == oldChild) {
      setNumericExpression((PNumericExpression) newChild);
      return;
    }

  }
}
