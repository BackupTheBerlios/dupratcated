/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.node;

import fr.umlv.symphonie.data.formula.analysis.Analysis;

public final class AMultiplicationMultiplicativeExpression extends
    PMultiplicativeExpression {

  private PMultiplicativeExpression _left_;
  private TMultiplicationOperator _multiplicationOperator_;
  private PUnaryExpression _right_;

  public AMultiplicationMultiplicativeExpression() {
  }

  public AMultiplicationMultiplicativeExpression(
      PMultiplicativeExpression _left_,
      TMultiplicationOperator _multiplicationOperator_, PUnaryExpression _right_) {
    setLeft(_left_);

    setMultiplicationOperator(_multiplicationOperator_);

    setRight(_right_);

  }

  public Object clone() {
    return new AMultiplicationMultiplicativeExpression(
        (PMultiplicativeExpression) cloneNode(_left_),
        (TMultiplicationOperator) cloneNode(_multiplicationOperator_),
        (PUnaryExpression) cloneNode(_right_));
  }

  public void apply(Switch sw) {
    ((Analysis) sw).caseAMultiplicationMultiplicativeExpression(this);
  }

  public PMultiplicativeExpression getLeft() {
    return _left_;
  }

  public void setLeft(PMultiplicativeExpression node) {
    if (_left_ != null) {
      _left_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _left_ = node;
  }

  public TMultiplicationOperator getMultiplicationOperator() {
    return _multiplicationOperator_;
  }

  public void setMultiplicationOperator(TMultiplicationOperator node) {
    if (_multiplicationOperator_ != null) {
      _multiplicationOperator_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _multiplicationOperator_ = node;
  }

  public PUnaryExpression getRight() {
    return _right_;
  }

  public void setRight(PUnaryExpression node) {
    if (_right_ != null) {
      _right_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _right_ = node;
  }

  public String toString() {
    return "" + toString(_left_) + toString(_multiplicationOperator_)
        + toString(_right_);
  }

  void removeChild(Node child) {
    if (_left_ == child) {
      _left_ = null;
      return;
    }

    if (_multiplicationOperator_ == child) {
      _multiplicationOperator_ = null;
      return;
    }

    if (_right_ == child) {
      _right_ = null;
      return;
    }

  }

  void replaceChild(Node oldChild, Node newChild) {
    if (_left_ == oldChild) {
      setLeft((PMultiplicativeExpression) newChild);
      return;
    }

    if (_multiplicationOperator_ == oldChild) {
      setMultiplicationOperator((TMultiplicationOperator) newChild);
      return;
    }

    if (_right_ == oldChild) {
      setRight((PUnaryExpression) newChild);
      return;
    }

  }
}
