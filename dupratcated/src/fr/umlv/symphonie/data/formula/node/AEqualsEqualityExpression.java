/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.node;

import fr.umlv.symphonie.data.formula.analysis.Analysis;

public final class AEqualsEqualityExpression extends PEqualityExpression {

  private PAdditiveExpression _left_;
  private TEquals _equals_;
  private PAdditiveExpression _right_;

  public AEqualsEqualityExpression() {
  }

  public AEqualsEqualityExpression(PAdditiveExpression _left_,
      TEquals _equals_, PAdditiveExpression _right_) {
    setLeft(_left_);

    setEquals(_equals_);

    setRight(_right_);

  }

  public Object clone() {
    return new AEqualsEqualityExpression(
        (PAdditiveExpression) cloneNode(_left_), (TEquals) cloneNode(_equals_),
        (PAdditiveExpression) cloneNode(_right_));
  }

  public void apply(Switch sw) {
    ((Analysis) sw).caseAEqualsEqualityExpression(this);
  }

  public PAdditiveExpression getLeft() {
    return _left_;
  }

  public void setLeft(PAdditiveExpression node) {
    if (_left_ != null) {
      _left_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _left_ = node;
  }

  public TEquals getEquals() {
    return _equals_;
  }

  public void setEquals(TEquals node) {
    if (_equals_ != null) {
      _equals_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _equals_ = node;
  }

  public PAdditiveExpression getRight() {
    return _right_;
  }

  public void setRight(PAdditiveExpression node) {
    if (_right_ != null) {
      _right_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _right_ = node;
  }

  public String toString() {
    return "" + toString(_left_) + toString(_equals_) + toString(_right_);
  }

  void removeChild(Node child) {
    if (_left_ == child) {
      _left_ = null;
      return;
    }

    if (_equals_ == child) {
      _equals_ = null;
      return;
    }

    if (_right_ == child) {
      _right_ = null;
      return;
    }

  }

  void replaceChild(Node oldChild, Node newChild) {
    if (_left_ == oldChild) {
      setLeft((PAdditiveExpression) newChild);
      return;
    }

    if (_equals_ == oldChild) {
      setEquals((TEquals) newChild);
      return;
    }

    if (_right_ == oldChild) {
      setRight((PAdditiveExpression) newChild);
      return;
    }

  }
}
