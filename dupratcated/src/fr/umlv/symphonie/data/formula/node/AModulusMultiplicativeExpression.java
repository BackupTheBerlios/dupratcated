/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.node;

import fr.umlv.symphonie.data.formula.analysis.Analysis;

public final class AModulusMultiplicativeExpression extends
    PMultiplicativeExpression {

  private PMultiplicativeExpression _left_;
  private TModulusOperator _modulusOperator_;
  private PUnaryExpression _right_;

  public AModulusMultiplicativeExpression() {
  }

  public AModulusMultiplicativeExpression(PMultiplicativeExpression _left_,
      TModulusOperator _modulusOperator_, PUnaryExpression _right_) {
    setLeft(_left_);

    setModulusOperator(_modulusOperator_);

    setRight(_right_);

  }

  public Object clone() {
    return new AModulusMultiplicativeExpression(
        (PMultiplicativeExpression) cloneNode(_left_),
        (TModulusOperator) cloneNode(_modulusOperator_),
        (PUnaryExpression) cloneNode(_right_));
  }

  public void apply(Switch sw) {
    ((Analysis) sw).caseAModulusMultiplicativeExpression(this);
  }

  public PMultiplicativeExpression getLeft() {
    return _left_;
  }

  public void setLeft(PMultiplicativeExpression node) {
    if (_left_ != null) {
      _left_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _left_ = node;
  }

  public TModulusOperator getModulusOperator() {
    return _modulusOperator_;
  }

  public void setModulusOperator(TModulusOperator node) {
    if (_modulusOperator_ != null) {
      _modulusOperator_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _modulusOperator_ = node;
  }

  public PUnaryExpression getRight() {
    return _right_;
  }

  public void setRight(PUnaryExpression node) {
    if (_right_ != null) {
      _right_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _right_ = node;
  }

  public String toString() {
    return "" + toString(_left_) + toString(_modulusOperator_)
        + toString(_right_);
  }

  void removeChild(Node child) {
    if (_left_ == child) {
      _left_ = null;
      return;
    }

    if (_modulusOperator_ == child) {
      _modulusOperator_ = null;
      return;
    }

    if (_right_ == child) {
      _right_ = null;
      return;
    }

  }

  void replaceChild(Node oldChild, Node newChild) {
    if (_left_ == oldChild) {
      setLeft((PMultiplicativeExpression) newChild);
      return;
    }

    if (_modulusOperator_ == oldChild) {
      setModulusOperator((TModulusOperator) newChild);
      return;
    }

    if (_right_ == oldChild) {
      setRight((PUnaryExpression) newChild);
      return;
    }

  }
}
