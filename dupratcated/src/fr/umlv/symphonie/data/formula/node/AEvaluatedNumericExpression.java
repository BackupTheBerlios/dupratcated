/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.node;

import fr.umlv.symphonie.data.formula.analysis.Analysis;

public final class AEvaluatedNumericExpression extends PNumericExpression {

  private PEvaluatedExpression _evaluatedExpression_;

  public AEvaluatedNumericExpression() {
  }

  public AEvaluatedNumericExpression(PEvaluatedExpression _evaluatedExpression_) {
    setEvaluatedExpression(_evaluatedExpression_);

  }

  public Object clone() {
    return new AEvaluatedNumericExpression(
        (PEvaluatedExpression) cloneNode(_evaluatedExpression_));
  }

  public void apply(Switch sw) {
    ((Analysis) sw).caseAEvaluatedNumericExpression(this);
  }

  public PEvaluatedExpression getEvaluatedExpression() {
    return _evaluatedExpression_;
  }

  public void setEvaluatedExpression(PEvaluatedExpression node) {
    if (_evaluatedExpression_ != null) {
      _evaluatedExpression_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _evaluatedExpression_ = node;
  }

  public String toString() {
    return "" + toString(_evaluatedExpression_);
  }

  void removeChild(Node child) {
    if (_evaluatedExpression_ == child) {
      _evaluatedExpression_ = null;
      return;
    }

  }

  void replaceChild(Node oldChild, Node newChild) {
    if (_evaluatedExpression_ == oldChild) {
      setEvaluatedExpression((PEvaluatedExpression) newChild);
      return;
    }

  }
}
