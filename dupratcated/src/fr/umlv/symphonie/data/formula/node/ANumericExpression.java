/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.node;

import fr.umlv.symphonie.data.formula.analysis.Analysis;

public final class ANumericExpression extends PExpression {

  private PAdditiveExpression _additiveExpression_;

  public ANumericExpression() {
  }

  public ANumericExpression(PAdditiveExpression _additiveExpression_) {
    setAdditiveExpression(_additiveExpression_);

  }

  public Object clone() {
    return new ANumericExpression(
        (PAdditiveExpression) cloneNode(_additiveExpression_));
  }

  public void apply(Switch sw) {
    ((Analysis) sw).caseANumericExpression(this);
  }

  public PAdditiveExpression getAdditiveExpression() {
    return _additiveExpression_;
  }

  public void setAdditiveExpression(PAdditiveExpression node) {
    if (_additiveExpression_ != null) {
      _additiveExpression_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _additiveExpression_ = node;
  }

  public String toString() {
    return "" + toString(_additiveExpression_);
  }

  void removeChild(Node child) {
    if (_additiveExpression_ == child) {
      _additiveExpression_ = null;
      return;
    }

  }

  void replaceChild(Node oldChild, Node newChild) {
    if (_additiveExpression_ == oldChild) {
      setAdditiveExpression((PAdditiveExpression) newChild);
      return;
    }

  }
}
