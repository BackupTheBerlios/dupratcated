/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.node;

import fr.umlv.symphonie.data.formula.analysis.Analysis;

public final class ALogicalAndLogicalAndExpression extends
    PLogicalAndExpression {

  private PLogicalAndExpression _left_;
  private TLogicalAndOperator _logicalAndOperator_;
  private PComparativeExpression _right_;

  public ALogicalAndLogicalAndExpression() {
  }

  public ALogicalAndLogicalAndExpression(PLogicalAndExpression _left_,
      TLogicalAndOperator _logicalAndOperator_, PComparativeExpression _right_) {
    setLeft(_left_);

    setLogicalAndOperator(_logicalAndOperator_);

    setRight(_right_);

  }

  public Object clone() {
    return new ALogicalAndLogicalAndExpression(
        (PLogicalAndExpression) cloneNode(_left_),
        (TLogicalAndOperator) cloneNode(_logicalAndOperator_),
        (PComparativeExpression) cloneNode(_right_));
  }

  public void apply(Switch sw) {
    ((Analysis) sw).caseALogicalAndLogicalAndExpression(this);
  }

  public PLogicalAndExpression getLeft() {
    return _left_;
  }

  public void setLeft(PLogicalAndExpression node) {
    if (_left_ != null) {
      _left_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _left_ = node;
  }

  public TLogicalAndOperator getLogicalAndOperator() {
    return _logicalAndOperator_;
  }

  public void setLogicalAndOperator(TLogicalAndOperator node) {
    if (_logicalAndOperator_ != null) {
      _logicalAndOperator_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _logicalAndOperator_ = node;
  }

  public PComparativeExpression getRight() {
    return _right_;
  }

  public void setRight(PComparativeExpression node) {
    if (_right_ != null) {
      _right_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _right_ = node;
  }

  public String toString() {
    return "" + toString(_left_) + toString(_logicalAndOperator_)
        + toString(_right_);
  }

  void removeChild(Node child) {
    if (_left_ == child) {
      _left_ = null;
      return;
    }

    if (_logicalAndOperator_ == child) {
      _logicalAndOperator_ = null;
      return;
    }

    if (_right_ == child) {
      _right_ = null;
      return;
    }

  }

  void replaceChild(Node oldChild, Node newChild) {
    if (_left_ == oldChild) {
      setLeft((PLogicalAndExpression) newChild);
      return;
    }

    if (_logicalAndOperator_ == oldChild) {
      setLogicalAndOperator((TLogicalAndOperator) newChild);
      return;
    }

    if (_right_ == oldChild) {
      setRight((PComparativeExpression) newChild);
      return;
    }

  }
}
