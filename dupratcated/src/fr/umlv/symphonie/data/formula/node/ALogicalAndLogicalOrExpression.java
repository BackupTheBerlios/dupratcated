/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.node;

import fr.umlv.symphonie.data.formula.analysis.Analysis;

public final class ALogicalAndLogicalOrExpression extends PLogicalOrExpression {

  private PLogicalAndExpression _logicalAndExpression_;

  public ALogicalAndLogicalOrExpression() {
  }

  public ALogicalAndLogicalOrExpression(
      PLogicalAndExpression _logicalAndExpression_) {
    setLogicalAndExpression(_logicalAndExpression_);

  }

  public Object clone() {
    return new ALogicalAndLogicalOrExpression(
        (PLogicalAndExpression) cloneNode(_logicalAndExpression_));
  }

  public void apply(Switch sw) {
    ((Analysis) sw).caseALogicalAndLogicalOrExpression(this);
  }

  public PLogicalAndExpression getLogicalAndExpression() {
    return _logicalAndExpression_;
  }

  public void setLogicalAndExpression(PLogicalAndExpression node) {
    if (_logicalAndExpression_ != null) {
      _logicalAndExpression_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _logicalAndExpression_ = node;
  }

  public String toString() {
    return "" + toString(_logicalAndExpression_);
  }

  void removeChild(Node child) {
    if (_logicalAndExpression_ == child) {
      _logicalAndExpression_ = null;
      return;
    }

  }

  void replaceChild(Node oldChild, Node newChild) {
    if (_logicalAndExpression_ == oldChild) {
      setLogicalAndExpression((PLogicalAndExpression) newChild);
      return;
    }

  }
}
