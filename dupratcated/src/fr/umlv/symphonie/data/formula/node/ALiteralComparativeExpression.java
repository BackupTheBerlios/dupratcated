/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.node;

import fr.umlv.symphonie.data.formula.analysis.Analysis;

public final class ALiteralComparativeExpression extends PComparativeExpression {

  private TBooleanLiteral _booleanLiteral_;

  public ALiteralComparativeExpression() {
  }

  public ALiteralComparativeExpression(TBooleanLiteral _booleanLiteral_) {
    setBooleanLiteral(_booleanLiteral_);

  }

  public Object clone() {
    return new ALiteralComparativeExpression(
        (TBooleanLiteral) cloneNode(_booleanLiteral_));
  }

  public void apply(Switch sw) {
    ((Analysis) sw).caseALiteralComparativeExpression(this);
  }

  public TBooleanLiteral getBooleanLiteral() {
    return _booleanLiteral_;
  }

  public void setBooleanLiteral(TBooleanLiteral node) {
    if (_booleanLiteral_ != null) {
      _booleanLiteral_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _booleanLiteral_ = node;
  }

  public String toString() {
    return "" + toString(_booleanLiteral_);
  }

  void removeChild(Node child) {
    if (_booleanLiteral_ == child) {
      _booleanLiteral_ = null;
      return;
    }

  }

  void replaceChild(Node oldChild, Node newChild) {
    if (_booleanLiteral_ == oldChild) {
      setBooleanLiteral((TBooleanLiteral) newChild);
      return;
    }

  }
}
