/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.node;

import fr.umlv.symphonie.data.formula.analysis.Analysis;

public final class AMultiplicativeAdditiveExpression extends
    PAdditiveExpression {

  private PMultiplicativeExpression _multiplicativeExpression_;

  public AMultiplicativeAdditiveExpression() {
  }

  public AMultiplicativeAdditiveExpression(
      PMultiplicativeExpression _multiplicativeExpression_) {
    setMultiplicativeExpression(_multiplicativeExpression_);

  }

  public Object clone() {
    return new AMultiplicativeAdditiveExpression(
        (PMultiplicativeExpression) cloneNode(_multiplicativeExpression_));
  }

  public void apply(Switch sw) {
    ((Analysis) sw).caseAMultiplicativeAdditiveExpression(this);
  }

  public PMultiplicativeExpression getMultiplicativeExpression() {
    return _multiplicativeExpression_;
  }

  public void setMultiplicativeExpression(PMultiplicativeExpression node) {
    if (_multiplicativeExpression_ != null) {
      _multiplicativeExpression_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _multiplicativeExpression_ = node;
  }

  public String toString() {
    return "" + toString(_multiplicativeExpression_);
  }

  void removeChild(Node child) {
    if (_multiplicativeExpression_ == child) {
      _multiplicativeExpression_ = null;
      return;
    }

  }

  void replaceChild(Node oldChild, Node newChild) {
    if (_multiplicativeExpression_ == oldChild) {
      setMultiplicativeExpression((PMultiplicativeExpression) newChild);
      return;
    }

  }
}
