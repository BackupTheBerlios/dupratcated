/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.node;

import fr.umlv.symphonie.data.formula.analysis.Analysis;

public final class ARelationalComparativeExpression extends
    PComparativeExpression {

  private PRelationalExpression _relationalExpression_;

  public ARelationalComparativeExpression() {
  }

  public ARelationalComparativeExpression(
      PRelationalExpression _relationalExpression_) {
    setRelationalExpression(_relationalExpression_);

  }

  public Object clone() {
    return new ARelationalComparativeExpression(
        (PRelationalExpression) cloneNode(_relationalExpression_));
  }

  public void apply(Switch sw) {
    ((Analysis) sw).caseARelationalComparativeExpression(this);
  }

  public PRelationalExpression getRelationalExpression() {
    return _relationalExpression_;
  }

  public void setRelationalExpression(PRelationalExpression node) {
    if (_relationalExpression_ != null) {
      _relationalExpression_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _relationalExpression_ = node;
  }

  public String toString() {
    return "" + toString(_relationalExpression_);
  }

  void removeChild(Node child) {
    if (_relationalExpression_ == child) {
      _relationalExpression_ = null;
      return;
    }

  }

  void replaceChild(Node oldChild, Node newChild) {
    if (_relationalExpression_ == oldChild) {
      setRelationalExpression((PRelationalExpression) newChild);
      return;
    }

  }
}
