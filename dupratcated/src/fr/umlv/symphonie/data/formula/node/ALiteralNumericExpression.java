/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.node;

import fr.umlv.symphonie.data.formula.analysis.Analysis;

public final class ALiteralNumericExpression extends PNumericExpression {

  private PLiteralExpression _literalExpression_;

  public ALiteralNumericExpression() {
  }

  public ALiteralNumericExpression(PLiteralExpression _literalExpression_) {
    setLiteralExpression(_literalExpression_);

  }

  public Object clone() {
    return new ALiteralNumericExpression(
        (PLiteralExpression) cloneNode(_literalExpression_));
  }

  public void apply(Switch sw) {
    ((Analysis) sw).caseALiteralNumericExpression(this);
  }

  public PLiteralExpression getLiteralExpression() {
    return _literalExpression_;
  }

  public void setLiteralExpression(PLiteralExpression node) {
    if (_literalExpression_ != null) {
      _literalExpression_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _literalExpression_ = node;
  }

  public String toString() {
    return "" + toString(_literalExpression_);
  }

  void removeChild(Node child) {
    if (_literalExpression_ == child) {
      _literalExpression_ = null;
      return;
    }

  }

  void replaceChild(Node oldChild, Node newChild) {
    if (_literalExpression_ == oldChild) {
      setLiteralExpression((PLiteralExpression) newChild);
      return;
    }

  }
}
