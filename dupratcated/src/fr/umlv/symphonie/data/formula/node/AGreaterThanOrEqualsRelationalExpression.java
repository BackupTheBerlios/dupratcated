/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.node;

import fr.umlv.symphonie.data.formula.analysis.Analysis;

public final class AGreaterThanOrEqualsRelationalExpression extends
    PRelationalExpression {

  private PAdditiveExpression _left_;
  private TGreaterThanOrEquals _greaterThanOrEquals_;
  private PAdditiveExpression _right_;

  public AGreaterThanOrEqualsRelationalExpression() {
  }

  public AGreaterThanOrEqualsRelationalExpression(PAdditiveExpression _left_,
      TGreaterThanOrEquals _greaterThanOrEquals_, PAdditiveExpression _right_) {
    setLeft(_left_);

    setGreaterThanOrEquals(_greaterThanOrEquals_);

    setRight(_right_);

  }

  public Object clone() {
    return new AGreaterThanOrEqualsRelationalExpression(
        (PAdditiveExpression) cloneNode(_left_),
        (TGreaterThanOrEquals) cloneNode(_greaterThanOrEquals_),
        (PAdditiveExpression) cloneNode(_right_));
  }

  public void apply(Switch sw) {
    ((Analysis) sw).caseAGreaterThanOrEqualsRelationalExpression(this);
  }

  public PAdditiveExpression getLeft() {
    return _left_;
  }

  public void setLeft(PAdditiveExpression node) {
    if (_left_ != null) {
      _left_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _left_ = node;
  }

  public TGreaterThanOrEquals getGreaterThanOrEquals() {
    return _greaterThanOrEquals_;
  }

  public void setGreaterThanOrEquals(TGreaterThanOrEquals node) {
    if (_greaterThanOrEquals_ != null) {
      _greaterThanOrEquals_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _greaterThanOrEquals_ = node;
  }

  public PAdditiveExpression getRight() {
    return _right_;
  }

  public void setRight(PAdditiveExpression node) {
    if (_right_ != null) {
      _right_.parent(null);
    }

    if (node != null) {
      if (node.parent() != null) {
        node.parent().removeChild(node);
      }

      node.parent(this);
    }

    _right_ = node;
  }

  public String toString() {
    return "" + toString(_left_) + toString(_greaterThanOrEquals_)
        + toString(_right_);
  }

  void removeChild(Node child) {
    if (_left_ == child) {
      _left_ = null;
      return;
    }

    if (_greaterThanOrEquals_ == child) {
      _greaterThanOrEquals_ = null;
      return;
    }

    if (_right_ == child) {
      _right_ = null;
      return;
    }

  }

  void replaceChild(Node oldChild, Node newChild) {
    if (_left_ == oldChild) {
      setLeft((PAdditiveExpression) newChild);
      return;
    }

    if (_greaterThanOrEquals_ == oldChild) {
      setGreaterThanOrEquals((TGreaterThanOrEquals) newChild);
      return;
    }

    if (_right_ == oldChild) {
      setRight((PAdditiveExpression) newChild);
      return;
    }

  }
}
