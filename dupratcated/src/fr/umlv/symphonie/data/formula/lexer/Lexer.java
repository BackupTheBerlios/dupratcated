/* This file was generated by SableCC (http://www.sablecc.org/). */

package fr.umlv.symphonie.data.formula.lexer;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.PushbackReader;

import fr.umlv.symphonie.data.formula.node.EOF;
import fr.umlv.symphonie.data.formula.node.TAdditionOperator;
import fr.umlv.symphonie.data.formula.node.TBlanks;
import fr.umlv.symphonie.data.formula.node.TBlockEnd;
import fr.umlv.symphonie.data.formula.node.TBlockPrefix;
import fr.umlv.symphonie.data.formula.node.TBlockStart;
import fr.umlv.symphonie.data.formula.node.TBooleanLiteral;
import fr.umlv.symphonie.data.formula.node.TDivisionOperator;
import fr.umlv.symphonie.data.formula.node.TDoubleLiteral;
import fr.umlv.symphonie.data.formula.node.TEquals;
import fr.umlv.symphonie.data.formula.node.TFuncId;
import fr.umlv.symphonie.data.formula.node.TGreaterThan;
import fr.umlv.symphonie.data.formula.node.TGreaterThanOrEquals;
import fr.umlv.symphonie.data.formula.node.TIdSeparator;
import fr.umlv.symphonie.data.formula.node.TIdentifier;
import fr.umlv.symphonie.data.formula.node.TIntegerLiteral;
import fr.umlv.symphonie.data.formula.node.TLeftParenthesis;
import fr.umlv.symphonie.data.formula.node.TLessThan;
import fr.umlv.symphonie.data.formula.node.TLessThanOrEquals;
import fr.umlv.symphonie.data.formula.node.TLogicalAndOperator;
import fr.umlv.symphonie.data.formula.node.TLogicalOrOperator;
import fr.umlv.symphonie.data.formula.node.TModulusOperator;
import fr.umlv.symphonie.data.formula.node.TMultiplicationOperator;
import fr.umlv.symphonie.data.formula.node.TNotEquals;
import fr.umlv.symphonie.data.formula.node.TRightParenthesis;
import fr.umlv.symphonie.data.formula.node.TSubstractionOperator;
import fr.umlv.symphonie.data.formula.node.Token;

public class Lexer {

  protected Token token;
  protected State state = State.NORMAL_STATE;

  private PushbackReader in;
  private int line;
  private int pos;
  private boolean cr;
  private boolean eof;
  private final StringBuffer text = new StringBuffer();

  protected void filter() throws LexerException, IOException {
  }

  public Lexer(PushbackReader in) {
    this.in = in;

    if (gotoTable == null) {
      try {
        DataInputStream s = new DataInputStream(new BufferedInputStream(
            Lexer.class.getResourceAsStream("lexer.dat")));

        // read gotoTable
        int length = s.readInt();
        gotoTable = new int[length][][][];
        for (int i = 0; i < gotoTable.length; i++) {
          length = s.readInt();
          gotoTable[i] = new int[length][][];
          for (int j = 0; j < gotoTable[i].length; j++) {
            length = s.readInt();
            gotoTable[i][j] = new int[length][3];
            for (int k = 0; k < gotoTable[i][j].length; k++) {
              for (int l = 0; l < 3; l++) {
                gotoTable[i][j][k][l] = s.readInt();
              }
            }
          }
        }

        // read accept
        length = s.readInt();
        accept = new int[length][];
        for (int i = 0; i < accept.length; i++) {
          length = s.readInt();
          accept[i] = new int[length];
          for (int j = 0; j < accept[i].length; j++) {
            accept[i][j] = s.readInt();
          }
        }

        s.close();
      } catch (Exception e) {
        throw new RuntimeException(
            "The file \"lexer.dat\" is either missing or corrupted.");
      }
    }
  }

  public Token peek() throws LexerException, IOException {
    while (token == null) {
      token = getToken();
      filter();
    }

    return token;
  }

  public Token next() throws LexerException, IOException {
    while (token == null) {
      token = getToken();
      filter();
    }

    Token result = token;
    token = null;
    return result;
  }

  protected Token getToken() throws IOException, LexerException {
    int dfa_state = 0;

    int start_pos = pos;
    int start_line = line;

    int accept_state = -1;
    int accept_token = -1;
    int accept_length = -1;
    int accept_pos = -1;
    int accept_line = -1;

    int[][][] gotoTable = Lexer.gotoTable[state.id()];
    int[] accept = Lexer.accept[state.id()];
    text.setLength(0);

    while (true) {
      int c = getChar();

      if (c != -1) {
        switch (c) {
          case 10:
            if (cr) {
              cr = false;
            } else {
              line++;
              pos = 0;
            }
            break;
          case 13:
            line++;
            pos = 0;
            cr = true;
            break;
          default:
            pos++;
            cr = false;
            break;
        }
        ;

        text.append((char) c);

        do {
          int oldState = (dfa_state < -1) ? (-2 - dfa_state) : dfa_state;

          dfa_state = -1;

          int[][] tmp1 = gotoTable[oldState];
          int low = 0;
          int high = tmp1.length - 1;

          while (low <= high) {
            int middle = (low + high) / 2;
            int[] tmp2 = tmp1[middle];

            if (c < tmp2[0]) {
              high = middle - 1;
            } else if (c > tmp2[1]) {
              low = middle + 1;
            } else {
              dfa_state = tmp2[2];
              break;
            }
          }
        } while (dfa_state < -1);
      } else {
        dfa_state = -1;
      }

      if (dfa_state >= 0) {
        if (accept[dfa_state] != -1) {
          accept_state = dfa_state;
          accept_token = accept[dfa_state];
          accept_length = text.length();
          accept_pos = pos;
          accept_line = line;
        }
      } else {
        if (accept_state != -1) {
          switch (accept_token) {
            case 0: {
              Token token = new0(start_line + 1, start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 1: {
              Token token = new1(start_line + 1, start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              switch (state.id()) {
                case 0:
                  state = State.ID_STATE;
                  break;
              }
              return token;
            }
            case 2: {
              Token token = new2(start_line + 1, start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              switch (state.id()) {
                case 1:
                  state = State.NORMAL_STATE;
                  break;
              }
              return token;
            }
            case 3: {
              Token token = new3(getText(accept_length), start_line + 1,
                  start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              switch (state.id()) {
                case 1:
                  state = State.ID_STATE;
                  break;
              }
              return token;
            }
            case 4: {
              Token token = new4(start_line + 1, start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 5: {
              Token token = new5(getText(accept_length), start_line + 1,
                  start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              switch (state.id()) {
                case 0:
                  state = State.NORMAL_STATE;
                  break;
              }
              return token;
            }
            case 6: {
              Token token = new6(getText(accept_length), start_line + 1,
                  start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 7: {
              Token token = new7(getText(accept_length), start_line + 1,
                  start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 8: {
              Token token = new8(getText(accept_length), start_line + 1,
                  start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 9: {
              Token token = new9(start_line + 1, start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 10: {
              Token token = new10(start_line + 1, start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 11: {
              Token token = new11(start_line + 1, start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 12: {
              Token token = new12(start_line + 1, start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 13: {
              Token token = new13(start_line + 1, start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 14: {
              Token token = new14(start_line + 1, start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 15: {
              Token token = new15(start_line + 1, start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 16: {
              Token token = new16(start_line + 1, start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 17: {
              Token token = new17(start_line + 1, start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 18: {
              Token token = new18(start_line + 1, start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 19: {
              Token token = new19(start_line + 1, start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 20: {
              Token token = new20(start_line + 1, start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 21: {
              Token token = new21(start_line + 1, start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 22: {
              Token token = new22(start_line + 1, start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 23: {
              Token token = new23(start_line + 1, start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
            case 24: {
              Token token = new24(getText(accept_length), start_line + 1,
                  start_pos + 1);
              pushBack(accept_length);
              pos = accept_pos;
              line = accept_line;
              return token;
            }
          }
        } else {
          if (text.length() > 0) {
            throw new LexerException("[" + (start_line + 1) + ","
                + (start_pos + 1) + "]" + " Unknown token: " + text);
          } else {
            EOF token = new EOF(start_line + 1, start_pos + 1);
            return token;
          }
        }
      }
    }
  }

  Token new0(int line, int pos) {
    return new TBlockPrefix(line, pos);
  }

  Token new1(int line, int pos) {
    return new TBlockStart(line, pos);
  }

  Token new2(int line, int pos) {
    return new TBlockEnd(line, pos);
  }

  Token new3(String text, int line, int pos) {
    return new TIdentifier(text, line, pos);
  }

  Token new4(int line, int pos) {
    return new TIdSeparator(line, pos);
  }

  Token new5(String text, int line, int pos) {
    return new TBlanks(text, line, pos);
  }

  Token new6(String text, int line, int pos) {
    return new TIntegerLiteral(text, line, pos);
  }

  Token new7(String text, int line, int pos) {
    return new TDoubleLiteral(text, line, pos);
  }

  Token new8(String text, int line, int pos) {
    return new TBooleanLiteral(text, line, pos);
  }

  Token new9(int line, int pos) {
    return new TLeftParenthesis(line, pos);
  }

  Token new10(int line, int pos) {
    return new TRightParenthesis(line, pos);
  }

  Token new11(int line, int pos) {
    return new TMultiplicationOperator(line, pos);
  }

  Token new12(int line, int pos) {
    return new TDivisionOperator(line, pos);
  }

  Token new13(int line, int pos) {
    return new TModulusOperator(line, pos);
  }

  Token new14(int line, int pos) {
    return new TAdditionOperator(line, pos);
  }

  Token new15(int line, int pos) {
    return new TSubstractionOperator(line, pos);
  }

  Token new16(int line, int pos) {
    return new TEquals(line, pos);
  }

  Token new17(int line, int pos) {
    return new TNotEquals(line, pos);
  }

  Token new18(int line, int pos) {
    return new TLessThan(line, pos);
  }

  Token new19(int line, int pos) {
    return new TLessThanOrEquals(line, pos);
  }

  Token new20(int line, int pos) {
    return new TGreaterThan(line, pos);
  }

  Token new21(int line, int pos) {
    return new TGreaterThanOrEquals(line, pos);
  }

  Token new22(int line, int pos) {
    return new TLogicalAndOperator(line, pos);
  }

  Token new23(int line, int pos) {
    return new TLogicalOrOperator(line, pos);
  }

  Token new24(String text, int line, int pos) {
    return new TFuncId(text, line, pos);
  }

  private int getChar() throws IOException {
    if (eof) {
      return -1;
    }

    int result = in.read();

    if (result == -1) {
      eof = true;
    }

    return result;
  }

  private void pushBack(int acceptLength) throws IOException {
    int length = text.length();
    for (int i = length - 1; i >= acceptLength; i--) {
      eof = false;

      in.unread(text.charAt(i));
    }
  }

  protected void unread(Token token) throws IOException {
    String text = token.getText();
    int length = text.length();

    for (int i = length - 1; i >= 0; i--) {
      eof = false;

      in.unread(text.charAt(i));
    }

    pos = token.getPos() - 1;
    line = token.getLine() - 1;
  }

  private String getText(int acceptLength) {
    StringBuffer s = new StringBuffer(acceptLength);
    for (int i = 0; i < acceptLength; i++) {
      s.append(text.charAt(i));
    }

    return s.toString();
  }

  private static int[][][][] gotoTable;
  /*
   * { { // NORMAL_STATE {{0, 0, 1}, {9, 9, 2}, {13, 13, 3}, {32, 32, 4}, {33,
   * 33, 5}, {36, 36, 6}, {37, 37, 7}, {38, 38, 8}, {40, 40, 9}, {41, 41, 10},
   * {42, 42, 11}, {43, 43, 12}, {44, 44, 13}, {45, 45, 14}, {47, 47, 15}, {48,
   * 57, 16}, {60, 60, 17}, {61, 61, 18}, {62, 62, 19}, {97, 101, 20}, {102,
   * 102, 21}, {103, 115, 20}, {116, 116, 22}, {117, 122, 20}, {124, 124, 23}, },
   * {{0, 32, -2}, }, {{0, 32, -2}, }, {{0, 0, 24}, {9, 32, -2}, }, {{0, 32,
   * -2}, }, {{61, 61, 25}, }, {{123, 123, 26}, }, {}, {{38, 38, 27}, }, {}, {},
   * {}, {}, {}, {}, {}, {{46, 46, 28}, {48, 57, 16}, }, {{61, 61, 29}, }, {{61,
   * 61, 30}, }, {{61, 61, 31}, }, {{97, 122, 20}, }, {{97, 97, 32}, {98, 122,
   * 20}, }, {{97, 113, 20}, {114, 114, 33}, {115, 122, 20}, }, {{124, 124, 34}, },
   * {{0, 32, -2}, }, {}, {}, {}, {{48, 57, 35}, }, {}, {}, {}, {{97, 107, 20},
   * {108, 108, 36}, {109, 122, 20}, }, {{97, 116, 20}, {117, 117, 37}, {118,
   * 122, 20}, }, {}, {{48, 57, 35}, }, {{97, 114, 20}, {115, 115, 38}, {116,
   * 122, 20}, }, {{97, 100, 20}, {101, 101, 39}, {102, 122, 20}, }, {{97, 100,
   * 20}, {101, 101, 40}, {102, 122, 20}, }, {{97, 122, 20}, }, {{97, 122, 20}, }, } { //
   * ID_STATE {{33, 33, 1}, {36, 36, 2}, {37, 37, 3}, {38, 38, 4}, {40, 40, 5},
   * {41, 41, 6}, {42, 42, 7}, {43, 43, 8}, {44, 44, 9}, {45, 45, 10}, {47, 47,
   * 11}, {48, 57, 12}, {60, 60, 13}, {61, 61, 14}, {62, 62, 15}, {65, 90, 16},
   * {97, 101, 17}, {102, 102, 18}, {103, 115, 17}, {116, 116, 19}, {117, 122,
   * 17}, {124, 124, 20}, {125, 125, 21}, {199, 199, 22}, {209, 209, 23}, {224,
   * 224, 24}, {225, 225, 25}, {226, 226, 26}, {228, 228, 27}, {229, 229, 28},
   * {230, 230, 29}, {231, 231, 30}, {232, 232, 31}, {233, 233, 32}, {234, 234,
   * 33}, {235, 235, 34}, {236, 236, 35}, {237, 237, 36}, {238, 238, 37}, {239,
   * 239, 38}, {241, 241, 39}, {242, 242, 40}, {243, 243, 41}, {244, 244, 42},
   * {246, 246, 43}, {249, 249, 44}, {250, 250, 45}, {251, 251, 46}, {252, 252,
   * 47}, }, {{61, 61, 48}, }, {}, {}, {{38, 38, 49}, }, {}, {}, {}, {}, {}, {},
   * {}, {{32, 32, 50}, {43, 43, 51}, {45, 45, 52}, {46, 46, 53}, {48, 57, 54},
   * {65, 90, 55}, {97, 122, 56}, {199, 199, 57}, {209, 209, 58}, {224, 224,
   * 59}, {225, 225, 60}, {226, 226, 61}, {228, 228, 62}, {229, 229, 63}, {230,
   * 230, 64}, {231, 231, 65}, {232, 232, 66}, {233, 233, 67}, {234, 234, 68},
   * {235, 235, 69}, {236, 236, 70}, {237, 237, 71}, {238, 238, 72}, {239, 239,
   * 73}, {241, 241, 74}, {242, 242, 75}, {243, 243, 76}, {244, 244, 77}, {246,
   * 246, 78}, {249, 249, 79}, {250, 250, 80}, {251, 251, 81}, {252, 252, 82}, },
   * {{61, 61, 83}, }, {{61, 61, 84}, }, {{61, 61, 85}, }, {{32, 45, -14}, {48,
   * 57, 86}, {65, 252, -14}, }, {{32, 90, -18}, {97, 122, 87}, {199, 252, -14}, },
   * {{32, 90, -18}, {97, 97, 88}, {98, 122, 87}, {199, 252, -14}, }, {{32, 90,
   * -18}, {97, 113, 87}, {114, 114, 89}, {115, 122, 87}, {199, 252, -14}, },
   * {{124, 124, 90}, }, {}, {{32, 252, -18}, }, {{32, 252, -18}, }, {{32, 252,
   * -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, }, {{32,
   * 252, -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, },
   * {{32, 252, -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, }, {{32, 252,
   * -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, }, {{32,
   * 252, -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, },
   * {{32, 252, -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, }, {{32, 252,
   * -18}, }, {{32, 252, -18}, }, {}, {}, {{32, 252, -18}, }, {{32, 252, -18}, },
   * {{32, 252, -18}, }, {{48, 57, 91}, }, {{32, 252, -14}, }, {{32, 252, -18}, },
   * {{32, 252, -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, }, {{32, 252,
   * -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, }, {{32,
   * 252, -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, },
   * {{32, 252, -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, }, {{32, 252,
   * -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, }, {{32,
   * 252, -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, },
   * {{32, 252, -18}, }, {{32, 252, -18}, }, {{32, 252, -18}, }, {{32, 252,
   * -18}, }, {{32, 252, -18}, }, {}, {}, {}, {{32, 252, -18}, }, {{32, 252,
   * -19}, }, {{32, 90, -18}, {97, 107, 87}, {108, 108, 92}, {109, 122, 87},
   * {199, 252, -14}, }, {{32, 90, -18}, {97, 116, 87}, {117, 117, 93}, {118,
   * 122, 87}, {199, 252, -14}, }, {}, {{48, 57, 91}, }, {{32, 90, -18}, {97,
   * 114, 87}, {115, 115, 94}, {116, 122, 87}, {199, 252, -14}, }, {{32, 90,
   * -18}, {97, 100, 87}, {101, 101, 95}, {102, 122, 87}, {199, 252, -14}, },
   * {{32, 100, -95}, {101, 101, 96}, {102, 252, -95}, }, {{32, 252, -19}, },
   * {{32, 252, -19}, }, } };
   */

  private static int[][] accept;

  /*
   * { // NORMAL_STATE {-1, 5, 5, 5, 5, -1, 0, 13, -1, 9, 10, 11, 14, 4, 15, 12,
   * 6, 18, -1, 20, 24, 24, 24, -1, 5, 17, 1, 22, -1, 19, 16, 21, 24, 24, 23, 7,
   * 24, 24, 24, 8, 8, }, // ID_STATE {-1, -1, 0, 13, -1, 9, 10, 11, 14, 4, 15,
   * 12, 3, 18, -1, 20, 3, 3, 3, 3, -1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
   * 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 17, 22, 3, 3, 3, -1, 3, 3, 3, 3,
   * 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
   * 19, 16, 21, 3, 3, 3, 3, 23, 7, 3, 3, 3, 3, 3, },
   *  };
   */

  public static class State {

    public final static State NORMAL_STATE = new State(0);
    public final static State ID_STATE = new State(1);

    private int id;

    private State(int id) {
      this.id = id;
    }

    public int id() {
      return id;
    }
  }
}
